import {render} from "@testing-library/react";
import CenterElement from "../components/bootstrap/CenterElement";

// Generated by CodiumAI

describe('CenterElement', () => {

    // Returns a div element with class 'd-flex justify-content-center align-items-center h-100' and any additional classes passed in through the 'className' prop, and with any children passed in through the 'children' prop.
    it('should return a div element with additional classes and children', () => {
      // Arrange
      const className = "custom-class";
      const children = <span>Test</span>;
      const props = { id: "test-id" };

      // Act
      const result = CenterElement({ className, children, ...props });

      // Assert
      expect(result.type).toBe("div");
      expect(result.props.className).toBe("custom-class d-flex justify-content-center align-items-center h-100");
      expect(result.props.children).toEqual(<span>Test</span>);
      expect(result.props.id).toBe("test-id");
    });

    // Returns a div element with any additional props passed in through the 'props' object.
    it('should return a div element with additional props', () => {
      // Arrange
      const props = { id: "test-id", dataTestId: "test-data-testid" };

      // Act
      const result = CenterElement({ ...props });

      // Assert
      expect(result.type).toBe("div");
      expect(result.props.className).toBe("d-flex justify-content-center align-items-center h-100");
      expect(result.props.id).toBe("test-id");
      expect(result.props.dataTestId).toBe("test-data-testid");
    });

    // Returns a div element with only the 'className' prop passed in, and no children or additional props.
    it('should return a div element with only className prop', () => {
      // Arrange
      const className = "custom-class";

      // Act
      const result = CenterElement({ className });

      // Assert
      expect(result.type).toBe("div");
      expect(result.props.className).toBe("custom-class d-flex justify-content-center align-items-center h-100");
      expect(result.props.children).toBeUndefined();
    });

    // Returns a div element with only the 'children' prop passed in, and no additional classes or props.
    it('should return a div element with only children prop', () => {
      // Arrange
      const children = <span>Test</span>;

      // Act
      const result = CenterElement({ children });

      // Assert
      expect(result.type).toBe("div");
      expect(result.props.className).toBe("d-flex justify-content-center align-items-center h-100");
      expect(result.props.children).toEqual(<span>Test</span>);
    });

    // Returns a div element with no props or children passed in.
    it('should return a div element with no props or children', () => {
      // Act
      const result = CenterElement({});

      // Assert
      expect(result.type).toBe("div");
      expect(result.props.className).toBe("d-flex justify-content-center align-items-center h-100");
      expect(result.props.children).toBeUndefined();
    });
});
